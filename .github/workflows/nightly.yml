name: Nightly

on:
  schedule:
    - cron:  '0 4 * * *'

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  K8S_TIMEOUT: 90s
  HELM_CHART_DIR: deployments/helm-chart
  HELM_CHART_VERSION: 0.0.0-edge
  VERSION: nightly

jobs:

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Determine Go version from go.mod
        run: echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> $GITHUB_ENV
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Determine GOPATH
        run: echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds*
      - name: Check if Codegen changed
        run: |
          make update-codegen && git diff --name-only --exit-code pkg/**/zz_generated.deepcopy.go
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: --rm-dist --debug --skip-publish --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ env.GOPATH }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v3.0.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Tests
        run: go test ./...

  build:
    name: Build Docker Images
    runs-on: ${{ matrix.os }}
    needs: [binary, unit-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: debian
            type: oss
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: alpine
            type: oss
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: debian-plus
            type: plus
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: opentracing
            type: oss
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: opentracing-plus
            type: plus
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: openshift
            type: oss
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: openshift-plus
            type: plus
          - os: ubuntu-20.04
            file: build/Dockerfile
            context: '.'
            target: goreleaser
            image: debian-plus-ap
            type: plus-ap
          - os: ubuntu-20.04
            file: build/DockerfileWithAppProtectForPlusForOpenShift
            context: '.'
            target: goreleaser
            image: nginx-plus-ingress-ap-openshift
            type: plus-ap-openshift
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3.0.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: ${{ matrix.file }}
          context: ${{ matrix.context }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: ${{ matrix.target }}
          tags: ${{ matrix.image }}:${{ github.sha }}
          build-args: |
            BUILD_OS=${{ matrix.image }}
        if: matrix.type == 'oss'
      - name: Build Plus Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: ${{ matrix.file }}
          context: ${{ matrix.context }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: ${{ matrix.target }}
          tags: ${{ matrix.image }}:${{ github.sha }}
          secrets: |
            "nginx-repo.crt=${{ secrets.KIC_NGINX_CRT }}"
            "nginx-repo.key=${{ secrets.KIC_NGINX_KEY }}"
          build-args: |
            BUILD_OS=${{ matrix.image }}
            PLUS=-plus
        if: matrix.type == 'plus'
      - name: Build AP Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: ${{ matrix.file }}
          context: ${{ matrix.context }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: ${{ matrix.target }}
          tags: ${{ matrix.image }}:${{ github.sha }}
          secrets: |
            "nginx-repo.crt=${{ secrets.KIC_NGINX_AP_CRT }}"
            "nginx-repo.key=${{ secrets.KIC_NGINX_AP_KEY }}"
            "rhel_license=${{ secrets.KIC_RHEL_LICENSE }}"
          build-args: |
            BUILD_OS=${{ matrix.image }}
            PLUS=-plus
        if: matrix.type == 'plus-ap' || matrix.type == 'plus-ap-openshift'

  smoke-tests:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    needs: [build, binary, unit-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: oss
            k8s: 1.20.0
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: oss
            k8s: 1.19.1
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: oss
            k8s: 1.18.8
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: oss
            k8s: 1.17.11
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: oss
            k8s: 1.16.15
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: plus
            k8s: 1.20.0
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: plus
            k8s: 1.19.1
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: plus
            k8s: 1.18.8
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: plus
            k8s: 1.17.11
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: ''
            type: plus
            k8s: 1.16.15
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: '-m appprotect'
            type: plus-ap
            k8s: 1.20.0
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: '-m appprotect'
            type: plus-ap
            k8s: 1.19.1
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: '-m appprotect'
            type: plus-ap
            k8s: 1.18.8
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: '-m appprotect'
            type: plus-ap
            k8s: 1.17.11
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: '-m appprotect'
            type: plus-ap
            k8s: 1.16.15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3.0.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build ${{ matrix.image }} Container
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ matrix.tag }}
          load: true
          build-args: |
            BUILD_OS=debian
        if: matrix.type == 'oss'
      - name: Build Plus Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ matrix.tag }}
          load: true
          secrets: |
            "nginx-repo.crt=${{ secrets.KIC_NGINX_CRT }}"
            "nginx-repo.key=${{ secrets.KIC_NGINX_KEY }}"
          build-args: |
            BUILD_OS=debian-plus
            PLUS=-plus
        if: matrix.type == 'plus'
      - name: Build AP Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ matrix.tag }}
          load: true
          secrets: |
            "nginx-repo.crt=${{ secrets.KIC_NGINX_AP_CRT }}"
            "nginx-repo.key=${{ secrets.KIC_NGINX_AP_KEY }}"
          build-args: |
            BUILD_OS=debian-plus-ap
            PLUS=-plus
        if: matrix.type == 'plus-ap'
      - name: Build Test-Runner Container
        uses: docker/build-push-action@v2
        with:
          file: tests/docker/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: test-runner:${{ matrix.tag }}
          load: true
      - name: Configure Kubernetes
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
            - role: worker
            - role: worker
            - role: worker
          EOF
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:v${{ matrix.k8s }} --config kind-config.yaml --kubeconfig kube-${{ github.run_id }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image ${{ matrix.image }}:${{ matrix.tag }} --name ${{ github.run_id }}
          echo ::set-output name=cluster_ip::$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ github.run_id }}-control-plane)
          echo ::set-output name=cluster::$(echo 'nginx-${{ matrix.type }}')
      - name: Setup Kubeconfig
        run: |
          sed -i 's|server:.*|server: https://${{ steps.k8s.outputs.cluster_ip }}:6443|' kube-${{ github.run_id }}
      - name: Run Smoke Tests
        run: |
          touch tests-${{ steps.k8s.outputs.cluster }}.html
          docker run --rm \
          --name test-runner-${{ github.run_id }} \
          --network=kind \
          -v ${{ github.workspace }}/tests/tests-${{ steps.k8s.outputs.cluster }}.html:/workspace/tests/tests-${{ steps.k8s.outputs.cluster }}.html \
          -v ${{ github.workspace }}/kube-${{ github.run_id }}:/root/.kube/config test-runner:${{ matrix.tag }} \
          --context=kind-${{ github.run_id }} \
          --image=${{ matrix.image }}:${{ matrix.tag }} \
          --image-pull-policy=Never \
          --ic-type=${{ matrix.image }} \
          --service=nodeport --node-ip=${{ steps.k8s.outputs.cluster_ip }} \
          --html=tests-${{ steps.k8s.outputs.cluster }}.html \
          --self-contained-html \
          ${{ matrix.marker }}
        working-directory: ./tests
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ steps.k8s.outputs.cluster }}-${{ matrix.k8s }}
          path: ${{ github.workspace }}/tests/tests-${{ steps.k8s.outputs.cluster }}.html
        if: always()

  helm-tests:
    name: Helm Tests
    runs-on: ${{ matrix.os }}
    needs: [build, binary, unit-tests]
    env:
      NGINX_HTTP_PORT: 8080
      NGINX_HTTPS_PORT: 8443
      HELM_TEST_RETRIES: 5
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            image: nginx-ingress
            tag: ${{ github.sha }}
            type: oss
          - os: ubuntu-20.04
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            type: plus
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3.0.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Docker build cache
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ matrix.tag }}
          load: true
          build-args: |
            BUILD_OS=debian
      - name: Build Plus Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ matrix.tag }}
          load: true
          secrets: |
            "nginx-repo.crt=${{ secrets.KIC_NGINX_CRT }}"
            "nginx-repo.key=${{ secrets.KIC_NGINX_KEY }}"
          build-args: |
            BUILD_OS=debian-plus
            PLUS=-plus
        if: matrix.type == 'plus'
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image ${{ matrix.image }}:${{ matrix.tag }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          ${{ matrix.type }}
          .
          --set controller.image.repository=${{ matrix.image }}
          --set controller.image.tag=${{ matrix.tag }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=$([[ "${{ matrix.type }}" = "plus" ]] && echo "true" || echo "false")
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress ${{ env.NGINX_HTTP_PORT }}:80 &
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress ${{ env.NGINX_HTTPS_PORT }}:443 &
      - name: Test HTTP
        run: |
          counter=0
          max_attempts=${{ env.HELM_TEST_RETRIES }}
          until [ $(curl --write-out %{http_code} -s --output /dev/null http://localhost:${{ env.NGINX_HTTP_PORT }}) -eq 404 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done
      - name: Test HTTPS
        run: |
          counter=0
          max_attempts=${{ env.HELM_TEST_RETRIES }}
          until [ $(curl --write-out %{http_code} -ks --output /dev/null https://localhost:${{ env.NGINX_HTTPS_PORT }}) -eq 404 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done

  notify:
    name: Notify
    runs-on: ubuntu-20.04
    needs: [helm-tests, smoke-tests]
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v2
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if:
          steps.check.outputs.status == 'failure' ||
          steps.check.outputs.status == 'cancelled'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                title: '[${{ steps.commit.outputs.repo }}] ${{ github.workflow }} pipeline has failed',
                color: '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ steps.commit.outputs.sha }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
